# Subscription Service — Основные задачи и сценарии

## 1. Получение событий оплаты (от Payment Service)
- Подписка на очередь событий (RabbitMQ)
- Получение событий типа "payment_success", "subscription_renewed", "payment_failed" и др.

## 2. Управление статусом подписки пользователя
- Создание новой записи подписки при успешной оплате
- Изменение статуса подписки (active, cancelled, expired, trial)
- Продление подписки (renewal)
- Отмена подписки (по запросу пользователя или при неудачной оплате)
- Хранение истории изменений и платежей

## 3. Ограничение доступа к платным функциям
- Предоставление API для проверки статуса подписки (для других сервисов)
- Реализация лимитов для бесплатных пользователей (например, количество AI-запросов)
- Выдача соответствующих прав/ролей (например, premium)

## 4. Тарифные планы и управление ими
- Хранение информации о тарифах (Free, Pro, Premium и т.д.)
- Возможность смены тарифа (upgrade/downgrade)

## 5. События и интеграции
- Генерация событий для других сервисов (например, отправка уведомлений при окончании подписки)
- Возможность отправки email-напоминаний через Notification Service

## 6. API для фронта и других сервисов
- Получение статуса подписки (`GET /api/subscription/status`)
- Смена/отмена тарифа (`POST /api/subscription/change`)
- Проверка лимитов использования (`GET /api/subscription/limits`)
- История подписок и платежей (`GET /api/subscription/history`)

## 7. Безопасность и аудит
- Валидация событий и данных (только подтвержденные оплаты активируют подписку)
- Логирование всех изменений и событий

---

## Пример сценария (RabbitMQ):

1. **Пользователь нажимает "Оплатить"**
2. **Payment Service** проводит оплату через внешний API (Stripe, YooKassa и т.д.)
3. По факту успешной оплаты **Payment Service** публикует событие `payment_success` в очередь (RabbitMQ)
4. **Subscription Service** получает это событие:
    - Проверяет, что транзакция валидна
    - Активирует подписку пользователя (или продлевает)
    - Обновляет статус в своей базе
    - Генерирует событие для Notification Service ("Подписка активирована")
    - API других сервисов теперь возвращает актуальный статус доступа пользователя

---

## Кратко: что должен делать Subscription Service

- **Реагировать на события оплаты** (и отмены/ошибки)
- **Хранить и обновлять статусы подписки**
- **Давать другим сервисам и фронту информацию о подписке**
- **Ограничивать доступ к платным функциям**
- **Обеспечивать смену тарифов и продление**
- **Сохранять историю и вести аудит**
